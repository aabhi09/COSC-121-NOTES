COSC121 – Week 1 
Introduction to Python – The What and Why
Python is a high-level, interpreted programming language that has become one of the most popular languages worldwide. Guido van Rossum created it in the early 1990s, 
designed to emphasize readability and to reduce the learning curve for beginners. Python’s syntax is deliberately clean and often described as "executable pseudocode",
meaning that it is close to how you might describe an algorithm in plain English.

In COSC121, Python replaced Java as the introductory language in 2010. This change was driven by the fact that Java required a lot of boilerplate code just to get 
basic programs running, and minor syntax mistakes (like forgetting a semicolon) could confuse beginners. Python eliminates these problems by reducing unnecessary 
syntax and following "there’s only one obvious way to do it," which helps learners focus on problem-solving rather than struggling with language quirks.

Getting Started – Setting Up Python and Wing 101
On campus, Python 3.x and Wing 101 are already installed on lab computers, so you can immediately start working through Learning Module 1 on AKO | LEARN. However, 
if you are working from home, you will need to install both. Python itself is a programming interpreter — a program that reads and runs Python code. Wing 101 is a 
specialized Integrated Development Environment (IDE) for beginner Python programmers. 
This IDE provides two key areas: the editor (where you write multi-line programs) and the Python shell (where you can enter 
commands one at a time to see immediate results).

A critical installation step for Python is to check the box that says "Add Python to PATH." This ensures Python can be called from any terminal or editor, making 
your life is much easier.

Python Engine and Shell – What’s the Difference?
The Python engine is the interpreter itself — the program responsible for reading your code, understanding its meaning, and converting it into actual machine 
operations that your computer performs. The Python shell is an interactive interface to the interpreter, where you type a command, press Enter, and see the result 
immediately. This is a REPL — Read, Evaluate, Print, Loop.

>>> 3 + 4
7

Understanding Expressions
An expression is any combination of values, variables, operators, and functions that evaluates to a single value.

Example:
>>> (25 * 3 - 5) / 7

Operators in Python
+  # addition
-  # subtraction
*  # multiplication
/  # division (float result)
// # integer division
** # exponentiation
%  # modulus

Operator Precedence – Order Matters
2 + 3 * 5   # 17
(2 + 3) * 5 # 25

Values and Their Types
print(type(5))      # <class 'int'>
print(type(3.14))   # <class 'float'>
print(type("hi"))   # <class 'str'>

Assignment Statements – Storing Data in Variables
my_age = 200 // 2 - 1
print(my_age)  # 99

Variables, References, and Memory
Python variables are just labels pointing to objects in memory. This is unlike low-level languages where variables directly hold values.

Combined Operators – Shortcuts for Assignments
count = 5
count += 1  # Equivalent to count = count + 1
print(count)  # 6

Functions – Building Blocks of Programs
def square(x):
    return x * x

print(square(4))  # 16

Built-in Functions
print(round(4.7))  # 5
print(abs(-10))    # 10
print(int(3.99))   # 3
ALL BUILT-IN PYTHON FUNCTIONS: https://www.w3schools.com/python/python_ref_functions.asp

Scope and Local Variables
def greet():
    message = "Hello"  # local variable
    print(message)

greet()
# print(message)  # This would give an error outside the function

Docstrings – Documenting Functions
def fahrenheit(celsius):
    """Converts Celsius to Fahrenheit."""
    return 9 / 5 * celsius + 32

What is Tracing?
Tracing means manually stepping through a program line by line, simulating what Python does in your head (or on paper). This skill is essential for debugging 
and understanding the logic behind programs. Instead of just running the code and seeing what happens, tracing forces you to predict and understand every step — 
what values variables hold, which functions get called, and what each statement does.

Why is Tracing Important?
In simple programs, tracing helps you:

Understand how assignments update variables.
See how expressions are evaluated.
Track how functions are called and return values.
Predict the final output before running the code.
In larger programs, tracing helps you:

Find logic errors (where the program runs but produces the wrong result).
Visualize the sequence of execution when functions call each other.
Debug step-by-step by following data and control flow.

Example of Tracing
x = 10
y = x + 5
x = y * 2
print(x)

Tracing with Functions
def add_five(n):
    return n + 5

x = 3
y = add_five(x)
print(y)

Tracing Control Flow (if/else)
x = 7
if x > 5:
    print("Big")
else:
    print("Small")

Summary Tip: Always Ask Yourself
What line is about to run next?
What values do variables hold right now?
What will the next line change?
What will be printed?
DEBUGGING IS REALLY IMPORTANT

If you struggle with tracing, use comments "#" showing variable changes at each step. This helps build the habit until tracing feels natural.

IMPORTANT= PEP-8 Style Guide: https://peps.python.org/pep-0008/


