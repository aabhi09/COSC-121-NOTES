Absolutely! Let’s rewrite these notes into **detailed paragraphs**, expanding every section with more explanation, context, and real-world examples. This will make it read like a **rich study guide or textbook chapter**. I’ll break down each topic into clear, readable sections, full of paragraphs and explanations — **the deep dive you deserve**.

---

# 📖 COSC121 – Week 1: Getting Started (Ultra Detailed Notes)

---

## 🐍 Introduction to Python – The What and Why

Python is a **high-level, interpreted programming language** that has become one of the most popular languages worldwide. It was created by **Guido van Rossum** in the early 1990s, designed to emphasize **readability** and to reduce the learning curve for beginners. Python’s syntax is deliberately clean and often described as **"executable pseudocode"**, meaning that it is close to how you might describe an algorithm in plain English.

In COSC121, Python replaced **Java** as the introductory language in 2010. This change was driven by the fact that Java required a lot of **boilerplate code** just to get basic programs running, and minor syntax mistakes (like forgetting a semicolon) could confuse beginners. Python eliminates these problems by reducing unnecessary syntax and following the **"there’s only one obvious way to do it"** principle, which helps learners focus on **problem-solving** rather than struggling with language quirks.

---

## 💻 Getting Started – Setting Up Python and Wing 101

On **campus**, Python 3.x and **Wing 101** are already installed on lab computers, so you can immediately start working through **Learning Module 1** on AKO | LEARN. However, if you are working from home, you will need to install both. Python itself is a programming **interpreter** — a program that reads and runs Python code. Wing 101 is a specialized **Integrated Development Environment (IDE)** tailored for beginner Python programmers. This IDE provides two key areas: the **editor** (where you write multi-line programs) and the **Python shell** (where you can enter commands one at a time to see immediate results).

⚠️ A **critical installation step** for Python is to check the box that says **"Add Python to PATH"**. This ensures Python can be called from **any terminal or editor**, making your life much easier.

---

## ⚙️ Python Engine and Shell – What’s the Difference?

The **Python engine** is the **interpreter** itself — the program responsible for reading your code, understanding its meaning, and converting it into actual **machine operations** that your computer performs. The **Python shell** is an interactive interface to the interpreter, where you type a command, press Enter, and see the result immediately. This is known as a **REPL** — Read, Evaluate, Print, Loop.

For example, in the shell you might type:
```python
>>> 3 + 4
7
```
This is fantastic for **quick tests** or trying out ideas before putting them into larger programs.

---

## ➕ Understanding Expressions

In programming, an **expression** is any combination of **values, variables, operators, and functions** that evaluates to a **single value**. For example:
```python
(25 * 3 - 5) / 7
```
This is a complete expression because it evaluates to a **single numerical result**. Expressions can appear as parts of larger **statements** — commands like assignments that **do something** with the evaluated result (e.g., storing it in a variable).

---

## ➗ Operators in Python

Python supports the full range of **arithmetic operators**:
- `+` for addition.
- `-` for subtraction.
- `*` for multiplication.
- `/` for division (producing a `float`, even if dividing integers).
- `//` for **integer division**, which truncates any decimal part.
- `**` for exponentiation (raising to a power).
- `%` for modulus (remainder after division).

This lets Python handle everything from simple math to advanced calculations easily.

---

## 🔗 Operator Precedence – Order Matters

Just like regular mathematics, Python follows **operator precedence** to decide which operation to perform first. Exponentiation (`**`) has the **highest precedence**, followed by multiplication and division (`*`, `/`, `//`, `%`). Addition and subtraction (`+`, `-`) come last. To change the default order, you can use **parentheses** to explicitly group operations.

Example:
```python
2 + 3 * 5    # equals 17
(2 + 3) * 5  # equals 25
```

---

## 🔢 Values and Their Types

Every **piece of data** in Python — whether a number, string, or list — has a **type**. Types define **what operations are allowed** and **how the data is stored**. For example:
- `int` – whole numbers like 5 or -23.
- `float` – decimal numbers like 3.14159.
- `str` – sequences of characters like "Hello".

You can check types in Python using:
```python
type(5)     # int
type(3.14)  # float
type("hi")  # str
```

---

## 📦 Assignment Statements – Storing Data in Variables

An **assignment statement** gives a name to a piece of data:
```python
my_age = 200 // 2 - 1
```
Here, Python evaluates the expression (`200 // 2 - 1`) to get `99`, then **creates an integer object** to hold `99`, and finally **adds `my_age` to the current dictionary of variables**, making `my_age` point to the integer object.

---

## 🧵 Variables, References, and Memory

Python handles variables **differently from low-level languages**. Instead of copying data into variables, Python variables are **just labels** that point to **objects in memory**. This means:
- The **object store (heap)** holds actual values (like 99).
- The **variable dictionary** maps names (`my_age`) to the memory addresses of those objects.

This system lets Python handle massive data sets efficiently, but it also introduces subtle behavior like **mutable vs immutable types** (discussed later in the course).

---

## ➕ Combined Operators – Shortcuts for Assignments

Python allows shorthand forms like:
```python
count += 1  # Equivalent to count = count + 1
```
This works with all operators: `+=`, `-=`, `*=`, `/=`, etc.

---

## 💬 Comments – Your Code’s Diary

A **comment** starts with `#` and runs to the end of the line. Python ignores comments, but they are essential for:
- Explaining what tricky code does.
- Reminding yourself why you wrote something.
- Making your code easier to maintain.

Example:
```python
# Calculate the area of a circle
area = 3.14 * radius ** 2
```

---

## 🧰 Functions – Building Blocks of Programs

A **function** is a reusable block of code that performs a specific task. Defining a function gives a **name** to a **sequence of instructions** so you can run it whenever needed:
```python
def square(x):
    return x * x
```
This defines the process. To use it, **call** the function:
```python
print(square(4))  # 16
```
Functions are Python’s primary tool for **abstraction** — taking common processes and giving them names.

---

## 📦 Built-in Functions

Python ships with many useful functions. Three important ones for beginners:
- `round()` – rounds to nearest integer.
- `abs()` – gets absolute value.
- `int()` – converts to integer (truncates decimal).

Example:
```python
round(4.7)  # 5
abs(-10)    # 10
int(3.99)   # 3
```

---

## 📍 Scope and Local Variables

Variables inside a function are **local** — they exist only while the function runs. Example:
```python
def greet():
    message = "Hello"  # Only exists inside greet()
```
Trying to access `message` outside the function causes an **error**.

---

## 📜 Docstrings – Documenting Functions

Every function should start with a **docstring** (a triple-quoted comment) explaining its purpose. Example:
```python
def fahrenheit(celsius):
    """Converts Celsius to Fahrenheit."""
    return 9/5 * celsius + 32
```
Docstrings make your code **self-documenting**.

---

## ✅ Real vs Procedure Functions

| Real Function | Procedure |
|---|---|
| Returns a value | Prints or performs actions |
| Usually doesn’t print | Doesn’t return anything |

---

Would you like me to continue this pattern for every single section? I can also make this into a **printable PDF textbook chapter**, add **practice questions**, or even create **study flashcards**. Just say the word! 📚🔥 Want me to cover tracing programs,
Pylint rules, and more in the same style?
